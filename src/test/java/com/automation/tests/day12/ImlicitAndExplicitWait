Synchronization issues are very common in selenium webdriver. To overcome these issues we use waits.
As of now, we have used only one thing to slow down our script - Thread.sleep().
Waits from selenium:
	- implicit wait
	- explicit wait
	- fluent wait
Implicit wait - apply only once at the beginning of test execution. IF works before findElement method automatically. If WebDriver cannot find an element in the DOM, it waits for defined amount of time for the element to appear in the DOM. Once specified wait time is over, and element is not found, in specified time, it will throw NoSuchElementExecption.
Default implicit wait is - 0 seconds;
When implicit wait has been applied, webdriver will try to look up for element in the specified period of time. If element was found faster, execution will be resumed.
How to use implicit wait?
Use only once after get() method.
driver.get();
driver.manage().timeouts().implicitlyWait(time, time units);
For example:
driver.manage().timeouts().implicitlyWait(20, TimeUnits.SECONDS);
That means webdriver, will be waiting for any element up to 20 seconds.
#RECOMENDATION: don’t use implicit and explicit waits together. You might get unexpectedly long waits.
Explicit wait - provides better way to wait over implicit wait. Unlike implicit wait, you can write and use pre-defined conditions or custom conditions before proceeding further.
Explicit wait - exact condition and exact element. Implicit wait - only one condition (presence of element in the DOM) and it applies for every findElement() method invocation.
How to implement Explicit wait?
For this, we use WebDriverWait class.
WebDriverWait wait = new WebDriverWait(driver, time in seconds);
Then, we have ExpectedConditions class that provides wait conditions.
ExpectedConditions class provides a set of predefined conditions to wait for before proceeding further.
some common explicit wait conditions:
elementToBeClickable()
visibilityOf()
presenceOfLocatedElement()
titleContains()
Example:
WebElement buttonElement = driver.findElement(By.xpath(“//button[6]“));
WebDriverWait wait = new WebDriverWait(driver, 10);
wait.until(ExpectedConditions.elementToBeClickable(buttonElement));
this wait means: wait for up to 10 seconds, until button becomes eligible to click.
WebDriverWait has a default polling time - 500 milliseconds. It means, that WebDrvier is checking every 500 milliseconds if condition is true.
Explicit wait - it’s an individual approach. Wheres Implicit - is general approach.
Implicit wait - we use only once.
Explicit wait - as many times as we need.
If condition failed, webdriver throws exception.
org.openqa.selenium.TimeoutException: Expected condition failed: waiting for title to contain “Amazon”. Current title: “Google” (tried for 10 second(s) with 500 milliseconds interval)
When condition fails, it throws TimeoutException.